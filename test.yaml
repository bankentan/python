package main

import (
    "encoding/json"
    "log"
    "net/http"

    "github.com/gorilla/mux"
    admissionv1 "k8s.io/api/admission/v1"
    metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func main() {
    router := mux.NewRouter()
    router.HandleFunc("/mutate", handleMutate).Methods("POST")
    log.Fatal(http.ListenAndServeTLS(":8443", "server.crt", "server.key", router))
}

func handleMutate(w http.ResponseWriter, r *http.Request) {
    var admissionReviewReq admissionv1.AdmissionReview
    if err := json.NewDecoder(r.Body).Decode(&admissionReviewReq); err != nil {
        http.Error(w, "could not decode request", http.StatusBadRequest)
        return
    }
    pod := &corev1.Pod{}
    rawPod := admissionReviewReq.Request.Object.Raw
    if err := json.Unmarshal(rawPod, pod); err != nil {
        http.Error(w, "could not unmarshal pod", http.StatusBadRequest)
        return
    }

    // Mutate pod with HTTPS_PROXY environment variable
    patchBytes, err := json.Marshal(createPatch(pod))
    if err != nil {
        http.Error(w, "could not marshal patch", http.StatusInternalServerError)
        return
    }
    admissionResponse := admissionv1.AdmissionResponse{
        Allowed: true,
        Patch:   patchBytes,
        PatchType: func() *admissionv1.PatchType {
            pt := admissionv1.PatchTypeJSONPatch
            return &pt
        }(),
    }

    admissionReviewRes := admissionv1.AdmissionReview{
        Response: &admissionResponse,
    }
    if err := json.NewEncoder(w).Encode(admissionReviewRes); err != nil {
        http.Error(w, "could not encode response", http.StatusInternalServerError)
        return
    }
}

func createPatch(pod *corev1.Pod) []patchOperation {
    patchOps := []patchOperation{}

    // Add HTTPS_PROXY environment variable to container(s)
    for i := range pod.Spec.Containers {
        container := &pod.Spec.Containers[i]
        envVar := corev1.EnvVar{
            Name:  "HTTPS_PROXY",
            Value: "egress",
        }
        container.Env = append(container.Env, envVar)

        patchOps = append(patchOps, patchOperation{
            Op:    "add",
            Path:  "/spec/containers/" + string(i) + "/env/-",
            Value: envVar,
        })
    }

    return patchOps
}

type patchOperation struct {
    Op    string      `json:"op"`
    Path  string      `json:"path"`
    Value interface{} `json:"value"`
}
