package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"

	admissionv1 "k8s.io/api/admission/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

const (
	// The server cert and key file paths.
	certFile = "/path/to/cert"
	keyFile  = "/path/to/key"
)

func main() {
	http.HandleFunc("/validate", validatePod)
	log.Fatal(http.ListenAndServeTLS(":8443", certFile, keyFile, nil))
}

// validatePod is the admission webhook that validates a Pod creation request.
func validatePod(w http.ResponseWriter, r *http.Request) {
	log.Println("Received Pod creation validation request")

	// Read the request body.
	requestBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		log.Printf("Error reading request body: %v", err)
		http.Error(w, "Error reading request body", http.StatusBadRequest)
		return
	}

	// Parse the AdmissionReview from the request body.
	admissionReview := admissionv1.AdmissionReview{}
	if err := json.Unmarshal(requestBody, &admissionReview); err != nil {
		log.Printf("Error unmarshaling AdmissionReview: %v", err)
		http.Error(w, "Error unmarshaling AdmissionReview", http.StatusBadRequest)
		return
	}

	// Get the Pod from the request.
	rawPod := admissionReview.Request.Object.Raw
	pod := corev1.Pod{}
	if err := json.Unmarshal(rawPod, &pod); err != nil {
		log.Printf("Error unmarshaling Pod: %v", err)
		http.Error(w, "Error unmarshaling Pod", http.StatusBadRequest)
		return
	}

	// Check if the Pod has the required label.
	if pod.Labels["app"] != "web" {
		log.Printf("Pod %s/%s is missing the 'app=web' label", pod.Namespace, pod.Name)
		admissionReview.Response = &admissionv1.AdmissionResponse{
			Result: &metav1.Status{
				Message: fmt.Sprintf("Pod %s/%s must have the 'app=web' label", pod.Namespace, pod.Name),
			},
			Allowed: false,
		}
	} else {
		admissionReview.Response = &admissionv1.AdmissionResponse{
			Allowed: true,
		}
	}

	// Marshal the AdmissionReview into a JSON response.
	responseBody, err := json.Marshal(admissionReview)
	if err != nil {
		log.Printf("Error marshaling AdmissionReview: %v", err)
		http.Error(w, "Error marshaling AdmissionReview", http.StatusInternalServerError)
		return
	}

	// Write the JSON response.
	w.Header().Set("Content-Type", "application/json")
	if _, err := w.Write(responseBody); err != nil {
		log.Printf("Error writing response: %v", err)
	}
}
