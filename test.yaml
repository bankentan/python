package main

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"

	"github.com/gorilla/mux"
	admissionv1 "k8s.io/api/admission/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

const (
	httpsProxyEnvVar = "HTTPS_PROXY"
	desiredValue      = "egress.com:8080"
)

func main() {
	r := mux.NewRouter()
	r.HandleFunc("/validate", validateHandler)
	log.Fatal(http.ListenAndServeTLS(":8443", "cert.pem", "key.pem", r))
}

func validateHandler(w http.ResponseWriter, r *http.Request) {
	requestBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		log.Printf("Error reading request body: %v", err)
		http.Error(w, "Error reading request body", http.StatusBadRequest)
		return
	}

	var admissionReview admissionv1.AdmissionReview
	if err := json.Unmarshal(requestBody, &admissionReview); err != nil {
		log.Printf("Error unmarshaling request body: %v", err)
		http.Error(w, "Error unmarshaling request body", http.StatusBadRequest)
		return
	}

	response := admissionv1.AdmissionResponse{
		Allowed: false,
		Result: &metav1.Status{
			Message: "Pod creation rejected because it does not include the desired HTTPS_PROXY environment variable value",
		},
	}

	pod := &corev1.Pod{}
	if err := json.Unmarshal(admissionReview.Request.Object.Raw, pod); err != nil {
		log.Printf("Error unmarshaling pod: %v", err)
		response.Result.Message = "Error unmarshaling pod"
		writeResponse(w, admissionReview.ResponseUID, response)
		return
	}

	if hasDesiredHTTPSProxyEnvVar(pod) {
		response.Allowed = true
		response.Result.Message = "Pod creation allowed"
	}

	writeResponse(w, admissionReview.ResponseUID, response)
}

func hasDesiredHTTPSProxyEnvVar(pod *corev1.Pod) bool {
	for _, container := range pod.Spec.Containers {
		for _, env := range container.Env {
			if env.Name == httpsProxyEnvVar && env.Value == desiredValue {
				return true
			}
		}
	}

	return false
}

func writeResponse(w http.ResponseWriter, uid string, response admissionv1.AdmissionResponse) {
	admissionReview := admissionv1.AdmissionReview{
		Response: &response,
	}

	if uid != "" {
		admissionReview.Response.UID = types.UID(uid)
	}

	responseBody, err := json.Marshal(admissionReview)
	if err != nil {
		log.Printf("Error marshaling response: %v", err)
		http.Error(w, "Error marshaling response", http.StatusInternalServerError)
		return
	}

	if _, err := w.Write(responseBody); err != nil {
		log.Printf("Error writing response: %v", err)
	}
}
